{"_type":"export","__export_format":4,"__export_date":"2022-07-09T16:29:35.135Z","__export_source":"insomnia.desktop.app:v2022.3.0","resources":[{"_id":"req_f74f3e2ffa2a445d895c0c47f373f992","parentId":"wrk_493c9bac97d94fb3a9fe1ef461fcf414","modified":1657380649186,"created":1657203433353,"url":"http://localhost:3333/veiculos","name":"My Request","description":"","method":"GET","body":{"mimeType":"multipart/form-data","params":[{"id":"pair_c92402dc98f943f89c16fa25638bc14c","name":"file","value":"","description":"","type":"file","fileName":"/home/Rafael/Desktop/file.csv"}]},"parameters":[{"id":"pair_20111eef23a64e4d82d3fd7402192fe3","name":"ok","value":"sim","description":"","disabled":true},{"id":"pair_525e3b2abbeb4b4489428397b34c709c","name":"des","value":"ok","description":"","disabled":true},{"id":"pair_5204b91d3cd541f98abb31c127788e2f","name":"pl","value":"JUP9876","description":"","disabled":true},{"id":"pair_34603a4c67e948b68d3d70f4a17a082b","name":"km","value":"sim","description":"","disabled":true},{"id":"pair_707f6c8634f34acca4b1d9318e8af750","name":"ct","value":"sim","description":""}],"headers":[{"name":"Content-Type","value":"multipart/form-data","id":"pair_492e3a0d46bf44b694458dfabfe61ac8"}],"authentication":{},"metaSortKey":-1657203433353,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"wrk_493c9bac97d94fb3a9fe1ef461fcf414","parentId":null,"modified":1654782643425,"created":1654782643425,"name":"New Document","description":"","scope":"design","_type":"workspace"},{"_id":"req_bbcc51710ecb4ea4a1d303bf1b4f8b61","parentId":"wrk_493c9bac97d94fb3a9fe1ef461fcf414","modified":1657216984020,"created":1657215050321,"url":"http://localhost:3333/client","name":"My Request","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1657172038026.8125,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_0527cad55c8d4ee8b0131d68fd3b4bee","parentId":"wrk_493c9bac97d94fb3a9fe1ef461fcf414","modified":1657216990932,"created":1657211071805,"url":"http://localhost:3333/empresas","name":"My Request","description":"","method":"GET","body":{"mimeType":"multipart/form-data","params":[{"id":"pair_c92402dc98f943f89c16fa25638bc14c","name":"file","value":"","description":"","type":"file","fileName":"/home/Rafael/Desktop/projetos/bdmongo/empresas/file.csv"}]},"parameters":[],"headers":[{"name":"Content-Type","value":"multipart/form-data","id":"pair_492e3a0d46bf44b694458dfabfe61ac8"}],"authentication":{},"metaSortKey":-1657140642700.625,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_bbfb206ecf44432c8a26ea809078bca0","parentId":"wrk_493c9bac97d94fb3a9fe1ef461fcf414","modified":1657216996963,"created":1657213613350,"url":"http://localhost:3333/funcionarios","name":"My Request","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1657124945037.5312,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_34cb95e3d9174460860d8b893e9e219c","parentId":"wrk_493c9bac97d94fb3a9fe1ef461fcf414","modified":1657214231510,"created":1657214194081,"url":"http://localhost:3333/empresas?_id=62c7094cd5a14b5c9eb5480b","name":"My Request","description":"","method":"PUT","body":{"mimeType":"multipart/form-data","params":[{"id":"pair_c92402dc98f943f89c16fa25638bc14c","name":"file","value":"","description":"","type":"file","fileName":"/home/Rafael/Desktop/projetos/bdmongo/venda/Planilha sem título - Página4.csv"}]},"parameters":[],"headers":[{"name":"Content-Type","value":"multipart/form-data","id":"pair_492e3a0d46bf44b694458dfabfe61ac8"}],"authentication":{},"metaSortKey":-1657109247374.4375,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_23824c81842e42dbb4af0f795e9f2171","parentId":"wrk_493c9bac97d94fb3a9fe1ef461fcf414","modified":1657205120870,"created":1657204354465,"url":"http://localhost:3333/despesas?id=62c6f12ca0f7ebaffa78007a","name":"My Request","description":"","method":"PUT","body":{"mimeType":"multipart/form-data","params":[{"id":"pair_c92402dc98f943f89c16fa25638bc14c","name":"file","value":"","description":"","type":"file","fileName":"/home/Rafael/Desktop/projetos/Nova pasta/file.csv"}]},"parameters":[],"headers":[{"name":"Content-Type","value":"multipart/form-data","id":"pair_492e3a0d46bf44b694458dfabfe61ac8"}],"authentication":{},"metaSortKey":-1657077852048.25,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_3aefce4ee36541908214cfd089a17a16","parentId":"wrk_493c9bac97d94fb3a9fe1ef461fcf414","modified":1657203577813,"created":1657203570131,"url":"http://localhost:3333/veiculos","name":"My Request","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1656952270743.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_f8e7348474ec4bae97b9bcd22188f4e2","parentId":"wrk_493c9bac97d94fb3a9fe1ef461fcf414","modified":1657213741974,"created":1657213625779,"url":"http://localhost:3333/funcionarios","name":"My Request","description":"","method":"POST","body":{"mimeType":"multipart/form-data","params":[{"id":"pair_67c1ba165a4b4b7a8aa924a421899da2","name":"file","value":"","description":"","type":"file","fileName":"/home/Rafael/Desktop/projetos/bdmongo/funcionario/Planilha sem título - Página3 .csv"}]},"parameters":[],"headers":[{"name":"Content-Type","value":"multipart/form-data","id":"pair_a9beba7fc3db43998ee3a75a83842e63"}],"authentication":{},"metaSortKey":-1656763898786.375,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_3dc9cd27a0244fcc984a621a5d0adf5b","parentId":"wrk_493c9bac97d94fb3a9fe1ef461fcf414","modified":1655402885721,"created":1655402355342,"url":"http://localhost:3333/client?id=62ab709feea154971adf1467","name":"My Request","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1655402355342,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"env_778a2aabad0bd273d65621117049dd1fe0f74dec","parentId":"wrk_493c9bac97d94fb3a9fe1ef461fcf414","modified":1655216712297,"created":1654782643443,"name":"Base Environment","data":{"base_url":"{{ scheme }}://{{ host }}{{ base_path }}","baseUrl":"http://localhost:4000/api/v1"},"dataPropertyOrder":{"&":["baseUrl"]},"color":null,"isPrivate":false,"metaSortKey":1654782643443,"_type":"environment"},{"_id":"jar_778a2aabad0bd273d65621117049dd1fe0f74dec","parentId":"wrk_493c9bac97d94fb3a9fe1ef461fcf414","modified":1654782643446,"created":1654782643446,"name":"Default Jar","cookies":[],"_type":"cookie_jar"},{"_id":"spc_348b52ee6f724079bb3fe2926eea3aa2","parentId":"wrk_493c9bac97d94fb3a9fe1ef461fcf414","modified":1657378932730,"created":1654782643438,"fileName":"New Document","contents":"openapi: 3.0.0\ninfo:\n  description: \"This is a sample server Petstore server.  You can find out more about\n    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,\n    #swagger](http://swagger.io/irc/).  For this sample, you can use the api key\n    `special-key` to test the authorization filters.\"\n  version: 1.0.2\n  title: Swagger Petstore\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: apiteam@swagger.io\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\ntags:\n  - name: pet\n    description: Everything about your Pets\n    externalDocs:\n      description: Find out more\n      url: http://swagger.io\n  - name: store\n    description: Access to Petstore orders\n  - name: user\n    description: Operations about user\n    externalDocs:\n      description: Find out more about our store\n      url: http://swagger.io\npaths:\n  /pet:\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: \"\"\n      operationId: addPet\n      requestBody:\n        $ref: \"#/components/requestBodies/Pet\"\n      responses:\n        \"405\":\n          description: Invalid input\n    put:\n      tags:\n        - pet\n      summary: Update an existing pet\n      description: \"\"\n      operationId: updatePet\n      requestBody:\n        $ref: \"#/components/requestBodies/Pet\"\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n        \"405\":\n          description: Validation exception\n  /pet/findByStatus:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n        - name: status\n          in: query\n          description: Status values that need to be considered for filter\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - available\n                - pending\n                - sold\n              default: available\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid status value\n  /pet/findByTags:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by tags\n      description: Multiple tags can be provided with comma separated strings. Use tag1,\n        tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n        - name: tags\n          in: query\n          description: Tags to filter by\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid tag value\n      deprecated: true\n  \"/pet/{petId}\":\n    get:\n      tags:\n        - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n    post:\n      tags:\n        - pet\n      summary: Updates a pet in the store with form data\n      description: \"\"\n      operationId: updatePetWithForm\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Updated name of the pet\n                  type: string\n                status:\n                  description: Updated status of the pet\n                  type: string\n      responses:\n        \"405\":\n          description: Invalid input\n    delete:\n      tags:\n        - pet\n      summary: Deletes a pet\n      description: \"\"\n      operationId: deletePet\n      parameters:\n        - name: api_key\n          in: header\n          required: false\n          schema:\n            type: string\n        - name: petId\n          in: path\n          description: Pet id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n  /store/inventory:\n    get:\n      tags:\n        - store\n      summary: Returns pet inventories by status\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int32\n  /store/order:\n    post:\n      tags:\n        - store\n      summary: Place an order for a pet\n      description: \"\"\n      operationId: placeOrder\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Order\"\n        description: order placed for purchasing the pet\n        required: true\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        \"400\":\n          description: Invalid Order\n  \"/store/order/{orderId}\":\n    get:\n      tags:\n        - store\n      summary: Find purchase order by ID\n      description: For valid response try integer IDs with value >= 1 and <= 10. Other\n        values will generated exceptions\n      operationId: getOrderById\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of pet that needs to be fetched\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n            maximum: 10\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Order not found\n    delete:\n      tags:\n        - store\n      summary: Delete purchase order by ID\n      description: For valid response try integer IDs with positive integer value. Negative\n        or non-integer values will generate API errors\n      operationId: deleteOrder\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of the order that needs to be deleted\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Order not found\n  /user:\n    post:\n      tags:\n        - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Created user object\n        required: true\n      responses:\n        default:\n          description: successful operation\n  /user/createWithArray:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: \"\"\n      operationId: createUsersWithArrayInput\n      requestBody:\n        $ref: \"#/components/requestBodies/UserArray\"\n      responses:\n        default:\n          description: successful operation\n  /user/createWithList:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: \"\"\n      operationId: createUsersWithListInput\n      requestBody:\n        $ref: \"#/components/requestBodies/UserArray\"\n      responses:\n        default:\n          description: successful operation\n  /user/login:\n    get:\n      tags:\n        - user\n      summary: Logs user into the system\n      description: \"\"\n      operationId: loginUser\n      parameters:\n        - name: username\n          in: query\n          description: The user name for login\n          required: true\n          schema:\n            type: string\n        - name: password\n          in: query\n          description: The password for login in clear text\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                type: string\n                format: date-time\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n        \"400\":\n          description: Invalid username/password supplied\n  /user/logout:\n    get:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      description: \"\"\n      operationId: logoutUser\n      responses:\n        default:\n          description: successful operation\n  \"/user/{username}\":\n    get:\n      tags:\n        - user\n      summary: Get user by user name\n      description: \"\"\n      operationId: getUserByName\n      parameters:\n        - name: username\n          in: path\n          description: \"The name that needs to be fetched. Use user1 for testing. \"\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/User\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\n    put:\n      tags:\n        - user\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n        - name: username\n          in: path\n          description: name that need to be updated\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Updated user object\n        required: true\n      responses:\n        \"400\":\n          description: Invalid user supplied\n        \"404\":\n          description: User not found\n    delete:\n      tags:\n        - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\nservers:\n  - url: https://petstore.swagger.io/v2\ncomponents:\n  requestBodies:\n    UserArray:\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: \"#/components/schemas/User\"\n      description: List of user object\n      required: true\n    Pet:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Pet\"\n        application/xml:\n          schema:\n            $ref: \"#/components/schemas/Pet\"\n      description: Pet object that needs to be added to the store\n      required: true\n  schemas:\n    Order:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        petId:\n          type: integer\n          format: int64\n        quantity:\n          type: integer\n          format: int32\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          enum:\n            - placed\n            - approved\n            - delivered\n        complete:\n          type: boolean\n          default: false\n      xml:\n        name: Order\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        username:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        phone:\n          type: string\n        userStatus:\n          type: integer\n          format: int32\n          description: User Status\n      xml:\n        name: User\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Category\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Tag\n    Pet:\n      type: object\n      required:\n        - name\n        - photoUrls\n      properties:\n        id:\n          type: integer\n          format: int64\n        category:\n          $ref: \"#/components/schemas/Category\"\n        name:\n          type: string\n          example: doggie\n        photoUrls:\n          type: array\n          xml:\n            name: photoUrl\n            wrapped: true\n          items:\n            type: string\n        tags:\n          type: array\n          xml:\n            name: tag\n            wrapped: true\n          items:\n            $ref: \"#/components/schemas/Tag\"\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n            - available\n            - pending\n            - sold\n      xml:\n        name: Pet\n    ApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string","contentType":"yaml","_type":"api_spec"},{"_id":"uts_c763b4cf2d424ca485472a1bda888ae2","parentId":"wrk_493c9bac97d94fb3a9fe1ef461fcf414","modified":1654782643451,"created":1654782643451,"name":"Example Test Suite","_type":"unit_test_suite"},{"_id":"env_env_778a2aabad0bd273d65621117049dd1fe0f74dec_sub","parentId":"env_778a2aabad0bd273d65621117049dd1fe0f74dec","modified":1657217068366,"created":1657217068366,"name":"OpenAPI env","data":{"scheme":"https","base_path":"/v2","host":"petstore.swagger.io"},"dataPropertyOrder":null,"color":null,"isPrivate":false,"metaSortKey":1657217068366,"_type":"environment"}]}